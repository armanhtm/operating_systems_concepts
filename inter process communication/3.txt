// C program to demonstrate use of fork() and pipe()
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<string.h>
#include<sys/wait.h>

void reverse_case(char *str) {
   int i,len=0;
    // Calculating length of input string
    
    while(str[len]!='\0')
    {
        len++;
    }
    for (i=0;i<len;i++)
    {
        if (str[i]>=65 && str[i]<=90)
        {
         str[i] = str[i] + 32;
        }    
 
        else if (str[i] >= 97 && str[i] <= 122)
        {
         str[i] = str[i] - 32;
        }    
    }
}  
int main()
{
    int fd1[2]; 
    int fd2[2];  
  
    char input_str[100];
    pid_t p;
  
    if (pipe(fd1)==-1)
    {
        fprintf(stderr, "Pipe Failed" );
        return 1;
    }
    if (pipe(fd2)==-1)
    {
        fprintf(stderr, "Pipe Failed" );
        return 1;
    }
  	printf("enter your string : ");
    scanf("%s", input_str);
    p = fork();
  
    if (p < 0)
    {
        fprintf(stderr, "fork Failed" );
        return 1;
    }
  
    else if (p > 0)
    {
        char transfer[100];
  
        close(fd1[0]);  // Close reading end of first pipe
 
        write(fd1[1], input_str, strlen(input_str)+1);
        close(fd1[1]);
  
        // Wait for child to send a string
        wait(NULL);
  
        close(fd2[1]); // Close writing end of second pipe
  
     
        read(fd2[0], transfer, 100);
        printf("first process recieved string : %s\n", transfer);
        close(fd2[0]);
    }
  
    // child process
    else
    {
        close(fd1[1]);  // Close writing end of first pipe
  
        // Read a string using first pipe
        char str[100];
        read(fd1[0], str, 100);
  
        // Concatenate a fixed string with it
        int size = strlen(str);      
        str[size] = '\0';   // string ends with '\0'
        printf("second process recieved string : %s\n",str);
        reverse_case(str);
        printf("second process changed string to  : %s and sent it to the first process\n",str);
        // Close both reading ends
        close(fd1[0]);
        close(fd2[0]);
  
        // Write concatenated string and close writing end
        write(fd2[1], str, strlen(str)+1);
        close(fd2[1]);
  
        exit(0);
    }
}