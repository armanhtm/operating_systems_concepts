#include <unistd.h>
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>


#define PORT 8070


int main(int argc, char const *argv[]) {

	char buffer[1024] = {0};
	char *hello = "Hello from server";
	int group1[100];
	int group2[100];
	
	// creates socket file descriptor
	int server_fd;
	server_fd = socket(AF_INET, SOCK_STREAM, 0);
	if (server_fd < 0) {
		perror("socket failed");
		exit(EXIT_FAILURE);
	}
	
	struct sockaddr_in address;
	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons(PORT); // host to network -- coverts the ending of the given integer
	const int addrlen = sizeof(address);
	
	
	// binding
	if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
	
	
	// listening on server socket with backlog size 3.
	if (listen(server_fd, 3) < 0) {
		perror("listen");
		exit(EXIT_FAILURE);
	}
	int indexGroup1=0;
	int indexGroup2=0;
	while(1){
	printf("Listen on %s:%d\n", inet_ntoa(address.sin_addr), ntohs(address.sin_port));
	
	// accepting client
	// accept returns client socket and fills given address and addrlen with client address information.
	int client_socket, valread;
	if ((client_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
		perror("accept");
		exit(EXIT_FAILURE);
	}
	printf("Hello client %s:%d\n", inet_ntoa(address.sin_addr), ntohs(address.sin_port));
	
	char buffer[1024] = {0};
	// reads a buffer with maximum size 1024 from socket.
	valread = read(client_socket, buffer, 1024);
	if (valread < 0) {
		perror("read");
		exit(EXIT_FAILURE);
	}
	printf("(s = %d) %s\n", valread, buffer);
	if(strcmp(buffer,"join group1")==0){
				printf("%d\n",client_socket );

		int m=0;
		for(int i=0 ; i<indexGroup1 ; i++)
			if(group1[i]==client_socket)
				m=1;
		if(m==0){	
			group1[indexGroup1] = client_socket;
			indexGroup1++;
			send(client_socket, "joined", strlen("joined"), 0);}
		if(m==1)
			send(client_socket,"no joined",strlen("no joined"),0);

		continue;

	}
	if(strcmp(buffer,"join group2")==0){
		int n=0;
		for(int i=0 ; i<indexGroup1 ; i++)
			if(group2[i]==client_socket)
				n=1;
		if(n==0){	
			group2[indexGroup2] = client_socket;
			indexGroup2++;
				send(client_socket, "joined", strlen("joined"), 0);}
			if(n==1)
				send(client_socket,"no joined",strlen("no joined"),0);

			continue;
		}

	if(strcmp(buffer,"leave group1")==0){
		for(int i=0 ; i<indexGroup1 ; i++)
			if(group1[i]==client_socket){
				group1[i]=-1;
			}
		send(client_socket, "leaved", strlen("leaved"), 0);

		continue;	
		
	}	
	if(strcmp(buffer,"leave group2")==0){
		for(int i=0 ; i<indexGroup1 ; i++)
			if(group2[i]==client_socket){
				group2[i]=-1;
			}
		send(client_socket, "leaved", strlen("leaved"), 0);

		continue;	
	}
	if(strcmp(buffer,"quit")==0){
		send(client_socket,"good by",strlen("good by"),0);
		continue;
	}
	//printf("%ld\n",strlen(buffer) );
	char groupInput[6];
	char input[strlen(buffer)-6];

	for (int i = 0; i < 6; ++i)
	{	
		groupInput[i]=buffer[i];
		
	}
	for (int i = 0; i < strlen(buffer)-6; ++i)
	{
		input[i] = buffer[i+7];	
	}
	

	if(strcmp(groupInput,"group1")==0){
		for (int i = 0; i <indexGroup1 ; ++i)
		{
			if(group1[i]!=-1)
				send(group1[i],input,strlen(input),0);
		}
		send(client_socket,"send to all",strlen("send to all"),0);
		continue;
	}

	if(strcmp(groupInput,"group2")==0){
		for (int i = 0; i <indexGroup2 ; ++i)
		{
			if(group2[i]!=-1)
				send(group2[i],input,strlen(input),0);
		}
		send(client_socket,"send to all",strlen("send to all"),0);
		continue;
	}
	send(client_socket,"no command find!",strlen("no command find!"),0);

	
	// writes to client socket
	//send(client_socket, hello, strlen(hello), 0);
	//printf("Hello message sent\n");
}
	
	
	return 0;
}